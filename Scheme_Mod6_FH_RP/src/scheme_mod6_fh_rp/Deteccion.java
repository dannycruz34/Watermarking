package scheme_mod6_fh_rp;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DanniC
 */
public class Deteccion extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public static Conexion db;
    DefaultTableModel modeloTabla;    
    String nombreDB,nombreTabla;
    
    public Deteccion(Conexion dbParametro,String nombreDB, String relacion) throws SQLException {
        db = dbParametro;
        nombreDB = this.nombreDB;
        nombreTabla = relacion;
        
        modeloTabla= new DefaultTableModel(null,getColumnas());
        initComponents();
                
    }

    private Deteccion() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtKeySecret = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtFracTupla = new javax.swing.JTextField();
        txtLSB = new javax.swing.JTextField();
        txtNumAttr = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnDetectar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableModel = new javax.swing.JTable();
        txtHuella = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtTraidor = new javax.swing.JTextField();
        txtTable = new javax.swing.JTextField();
        btnCargar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1024, 900));
        setPreferredSize(new java.awt.Dimension(1600, 550));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("LLave Secreta:");

        txtKeySecret.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKeySecretActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel3.setText("Parámetros");

        jLabel6.setText("Fracción Tupla");

        jLabel7.setText("LSB's");

        jLabel8.setText("Num Atributos");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFracTupla, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addComponent(txtLSB)
                            .addComponent(txtNumAttr))
                        .addGap(75, 75, 75))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtKeySecret, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(32, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtKeySecret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFracTupla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLSB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumAttr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap(290, Short.MAX_VALUE))
        );

        jPanel3.setBackground(javax.swing.UIManager.getDefaults().getColor("Desktop.background"));
        jPanel3.setForeground(javax.swing.UIManager.getDefaults().getColor("Desktop.background"));

        btnDetectar.setBackground(new java.awt.Color(255, 102, 102));
        btnDetectar.setText("Detectar Huella Digital");
        btnDetectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetectarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel1.setText("RDB:");

        tableModel.setModel(modeloTabla);
        jScrollPane1.setViewportView(tableModel);

        jLabel9.setText("Traidor:");

        txtTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTableActionPerformed(evt);
            }
        });

        btnCargar.setText("Cargar RDB");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        jLabel10.setText("Huella");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDetectar)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTable, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCargar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtHuella, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTraidor, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCargar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDetectar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHuella, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTraidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Tamil MN", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Algoritmo de Detección de Huella Digital");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtKeySecretActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKeySecretActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKeySecretActionPerformed

    private void btnDetectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetectarActionPerformed
        try {
            deteccionHuella();
        } catch (SQLException ex) {
            Logger.getLogger(Deteccion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDetectarActionPerformed

    private void txtTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTableActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        // TODO add your handling code here:
        setFilas();
    }//GEN-LAST:event_btnCargarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Deteccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Deteccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Deteccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Deteccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Deteccion().setVisible(true);
            }
        });
        
    }
    
    public static String cryptMD5(String textoPlano)
    {
        try
        {
           char[] HEXADECIMALES = { '0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f' };

           MessageDigest msgdgt = MessageDigest.getInstance("MD5");
           byte[] bytes = msgdgt.digest(textoPlano.getBytes());
           StringBuilder strCryptMD5 = new StringBuilder(2 * bytes.length);
           for (int i = 0; i < bytes.length; i++)
           {
               int low = (int)(bytes[i] & 0x0f);
               int high = (int)((bytes[i] & 0xf0) >> 4);
               strCryptMD5.append(HEXADECIMALES[high]);
               strCryptMD5.append(HEXADECIMALES[low]);
           }
           return strCryptMD5.toString();
        } catch (NoSuchAlgorithmException e) {
           return null;
        }
    }
    
    public void deteccionHuella() throws SQLException{
        
        String id_key;
        String key_secret = txtKeySecret.getText();
        int geneS;
        int fTupla,numAttr,lsb,L;
        int attribute_num;
        int bit_index;
        int mask_bit;
        int indiceAttr;
        int fingerprint_index;
        int fingerprint_bit;
        int mark_bit;
        int index=0;
        int longitud= 1842;
        int valor;
        int valorActual;
        Random number;       
        int aux;
        String indicesP = "";
        String valorBinario = "";
        String NombreTabla = txtTable.getText();
        CriptographicFunctions funciones =  new CriptographicFunctions();
        ArrayList atributos = new ArrayList();
        ArrayList indices = new ArrayList();
        ArrayList aleatorios = new ArrayList();
        
        String Query = "SELECT * FROM " + NombreTabla;

        db.comando = db.conexion.createStatement();
        db.registro = db.comando.executeQuery(Query);
        
        fTupla = Integer.parseInt(txtFracTupla.getText());
        numAttr = Integer.parseInt(txtNumAttr.getText());
        lsb = Integer.parseInt(txtLSB.getText());
        L = 64;
        //Inicializar huella y contadores
        int[][] count = new int[longitud][2];
        
        for(int i=0; i< L-1; i++){
            count[i][0] = 0;
            count[i][1] = 0;
        }
        
        //Proceso de deteccion
        while (db.registro.next()) {
                        
            System.out.println("key: " + db.registro.getString(1) + 
                            "\ta1: " + db.registro.getString(2) +
                    "\ta2: " + db.registro.getString(3) +
                    "\ta3: " + db.registro.getString(4) +
                    "\ta4: " + db.registro.getString(5) +
                    "\ta5: " + db.registro.getString(6) +
                    "\ta6: " + db.registro.getString(7) +
                    "\ta7: " + db.registro.getString(8) +
                    "\ta8: " + db.registro.getString(9) +
                    "\ta9: " + db.registro.getString(10) +
                            "\ta10: " + db.registro.getString(11));
            //Semilla del generador pseudoaleatorio
            id_key = db.registro.getString(1);
            geneS = Integer.parseInt(key_secret + id_key);
            System.out.println("LLave + id : " + geneS);
            aleatorios = funciones.lfsr(geneS,4);
            
            Random sr = new Random(geneS);

            
            if( ((int)aleatorios.get(0) % fTupla) == 0 ){
                attribute_num = ((int)aleatorios.get(1) % numAttr)+1;
                
                //Obtener posicion bit LSB
                bit_index = ((int)aleatorios.get(2) % lsb)+1;
                
                //Obtener bit de mascara
                if((int)aleatorios.get(3) % 2 == 0){
                    mask_bit = 0;
                }else{
                    mask_bit = 1;
                }
                
                //Aleatorios para atributos
                atributos = funciones.aleatoriosAtributos(geneS, numAttr, attribute_num);
                //Aleatorios para indices de huella
                indices = funciones.lfsr(geneS, attribute_num);
                
                for(int i=0;i < attribute_num ; i++){
                        
                        //Seleccion de indice de huella  
                        if(index == longitud)
                            index =0;
                        fingerprint_index = (int)indices.get(i) % L;
                        indicesP = indicesP + fingerprint_index + "_";

                        //Seleccion numero de atributoS a seleccionar
                        indiceAttr = (int) atributos.get(i);
                        
                        //Valor atributo
                        valor = Integer.parseInt(db.registro.getString(indiceAttr+1));
                        valorBinario = Integer.toBinaryString(valor);
                        System.out.println("Valor: " + valor + "  Binario: " + valorBinario + "  Bit index: " + bit_index);

                        //Si bit lsb no existe, saltar //ACOMPLETAR BITS            
                        valorBinario = verificaBit(bit_index,valorBinario);
                        //if(aux != 0){

                        //Obtener bit marcado
                        int indice = valorBinario.length() - bit_index;
                        mark_bit = Integer.parseInt(valorBinario.substring(indice,indice+1));


                        //Obtener bit de huella
                        fingerprint_bit = mask_bit ^ mark_bit;


                        //Contador bit fingerprint
                        System.out.println("Indice Huella: " + fingerprint_index + "  Bit Huella: "  + fingerprint_bit);
                        count[fingerprint_index][fingerprint_bit]++;  
                        
                }

                
            }
            System.out.println("------------------------------------------");                      
        }
        
        System.out.println("Fingerprint recuperado con contadores de 0 y 1");
        for(int i=0;i<longitud;i++){
            System.out.println(i + "\t" + (count[i][0] + count[i][1]) + "\n");
        }
        System.out.println("Indices: " + indicesP);
        recuperarHuella(count);
        
    }
    
    public String obtenerBitsHuella(String huella){
        String text = huella;
        System.out.println("Texto: "+ text);

        String binary = new BigInteger(text.getBytes()).toString(2);
        System.out.println("Binario: " + binary);

        String text2 = new String(new BigInteger(binary, 2).toByteArray());
        System.out.println("Texto: "+text2);
       
        String huellaCorta = binary.substring(0,64);
        System.out.println(huellaCorta.length());
        
        return huellaCorta;
    }
    
    
    public String verificaBit(int bit_index, String valor){
        int tam=0;
        String acompletar="";
        if(valor.length() < bit_index){
            tam = bit_index - valor.length();
            for(int i=0;i < tam; i++){
                acompletar = acompletar + "0";
            }
            valor = acompletar + valor;            
        }
        return valor;
    }
    
    public void recuperarHuella(int count[][]){
        int L=1842;
        boolean[] fingerprint = new boolean[L];
        float T=0.5f;
        for(int i=0; i< L; i++){
            if(count[i][0] + count[i][1] == 0){
                System.out.println("None");
            }else{
                if(count[i][0]/(count[i][0] + count[i][1]) > T){
                    fingerprint[i] = false;
                }
                if(count[i][1]/(count[i][0] + count[i][1]) > T){
                    fingerprint[i] = true;
                }
            }
        }
        String huella = "";
        System.out.println("Huella final recuperada");
        for(int i=0; i< L; i++){
            System.out.println(i+1 + "\t" + fingerprint[i]);
            huella = huella + fingerprint[i];
        }
        
        ///LLAMAR FUNCION PARA DETERMINAR AL TRAIDOR CON TARDOS
        ArrayList culpables = new ArrayList();
        culpables = traidorTardos(fingerprint);
        if( culpables.size() > 0){
            for (int i = 0; i < culpables.size(); i++) {
                System.out.println("User : " + culpables.get(i));
                txtTraidor.setText("User" + culpables.get(i));

            }
        }            
        
        ///////////////////////////////////////////////////////
        
    }
    
    
    public ArrayList traidorTardos(boolean[] fingerprint){
        ArrayList culpables = new ArrayList();
        Tardos codeTools = new Tardos();
        TardosCode codigo = new TardosCode();
        try {
            codigo = codigoTardos();
            culpables = codeTools.accusation(codigo.getHuella(), fingerprint, codigo.getP(), 2, codigo.getK());
            
        } catch (IOException ex) {
            Logger.getLogger(Deteccion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return culpables;
    }
    
    
    public static TardosCode codigoTardos() throws IOException{
        TardosCode code = new TardosCode();
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        ArrayList codigos = new ArrayList();
        
        try {
            archivo = new File ("/Users/DanniC/Documents/INAOE_2Cuatri/Tesis/Experiementos/codigos.txt");
            fr = new FileReader (archivo);
            br = new BufferedReader(fr);
           
            // Lectura del fichero
            int length = Integer.parseInt( br.readLine() );
            double[] p = new double[length];
            double k = 0;
            
            String linea;
            int i=0,j=0;
            while((linea=br.readLine())!=null){
                if(i > length){
                    codigos.add(linea);
                    System.out.println(linea);
                }else if(i == length){
                    k = Double.parseDouble(linea);
                }else{
                    p[j] = Double.parseDouble(linea);
                    j++;
                }
                i++;
            }
            
            //Vaciar ArrayList a arreglo boolean
            boolean[][] huellas = new boolean[codigos.size()][length];
            for (int l = 0; l < codigos.size(); l++) {
                String aux = (String) codigos.get(l);
                for (int m = 0; m < length; m++) {
                    String x = aux.substring(m, m+1);
                    if(x.equals("0"))
                        huellas[l][m] = false;
                    else
                        huellas[l][m] = true;
                }
            }
    
            code.setK(k);
            code.setP(p);
            code.setHuella(huellas);
            
            
        } catch (FileNotFoundException ex) {
        }
       
         return code;
    }

    
    public static int[] lfsr(int numero){
        String binario =  Integer.toBinaryString(numero) + "00000000000000000000";
		int y[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1}; // 6,5	

		int aleatorios[] = new int[5];
        y[0] = Integer.parseInt(binario.substring(0,1));
        y[1] = Integer.parseInt(binario.substring(1,2));
        y[2] = Integer.parseInt(binario.substring(2,3));
        y[3] = Integer.parseInt(binario.substring(3,4));
        y[4] = Integer.parseInt(binario.substring(4,5));
        y[5] = Integer.parseInt(binario.substring(5,6));
        y[6] = Integer.parseInt(binario.substring(6,7));
        y[7] = Integer.parseInt(binario.substring(7,8));
        y[8] = Integer.parseInt(binario.substring(8,9));
        y[9] = Integer.parseInt(binario.substring(9,10));
        y[10] = Integer.parseInt(binario.substring(10,11));
        y[11] = Integer.parseInt(binario.substring(11,12));
        y[12] = Integer.parseInt(binario.substring(12,13));
        y[13] = Integer.parseInt(binario.substring(13,14));
        y[14] = Integer.parseInt(binario.substring(14,15));
        y[15] = Integer.parseInt(binario.substring(15,16));
        y[16] = Integer.parseInt(binario.substring(16,17));
        y[17] = Integer.parseInt(binario.substring(17,18));
        y[18] = Integer.parseInt(binario.substring(18,19));

		double periodo = 5 ;
		int num;
		String valor="";
		int sy;
		int l=0;
		for(int j=0;j< periodo;j++){
				
				sy = y[18];
				y[18] = y[17];
				y[17] = y[16];
				y[16] = y[15];
				y[15] = y[14];
				y[14] = y[13];
				y[13] = y[12];
				y[12] = y[11];
				y[11] = y[10];
				y[10] = y[9];
				y[9] = y[8];
				y[8] = y[7];
				y[7] = y[6];
				y[6] = y[5];
				y[5] = y[4];
				y[4] = y[3];
				y[3] = y[2];
				y[2] = y[1];
				y[1] = y[0];
				y[0] = y[18]^sy^y[17]^y[15];
				
				for(int k=0;k < 19 ; k++){
					valor = valor + y[k];
					System.out.print(y[k]);
				}
	            num =Integer.parseInt(valor,2);
	            aleatorios[l] = num;
	            l++;
				valor="";
				System.out.println(" " + num);
			
		}
		return aleatorios;
	}
    
 
    private String[] getColumnas(){
        String columna[] = new String[]{"id_key","a1","a2","a3","a4","a5","a6","a7","a8","a9","a10"};
        return columna;
    }
    
    private void setFilas(){
        String NombreTabla = txtTable.getText();
        String Query = "SELECT * FROM " + NombreTabla;

        try {
            db.comando = db.conexion.createStatement();
            db.registro = db.comando.executeQuery(Query);
            Object datos[] = new Object[11];
            
            while (db.registro.next()) {
                for(int i=0;i< 11; i++){
                    //System.out.println(db.registro.getString(i+1));
                    datos[i] = db.registro.getObject(i+1);
                }               
                modeloTabla.addRow(datos);
            }
            db.comando.close();
        } catch (SQLException ex) {
        }                
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnDetectar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableModel;
    private javax.swing.JTextField txtFracTupla;
    private javax.swing.JTextField txtHuella;
    private javax.swing.JTextField txtKeySecret;
    private javax.swing.JTextField txtLSB;
    private javax.swing.JTextField txtNumAttr;
    private javax.swing.JTextField txtTable;
    private javax.swing.JTextField txtTraidor;
    // End of variables declaration//GEN-END:variables
}
